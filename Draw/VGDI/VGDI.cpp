/*---------------------------------------------------------------------+\
|
|	VGDI.cpp  --  brief description of what VGDI.cpp is for
|
|	Purpose:
|	File Custodian:		J.Griswold
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	29-Jun-2012			J.Griswold		(Reviewed by: xxxx)
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Include Files
|
\+---------------------------------------------------------------------*/
#include "VGDI.h"
namespace Yogi { namespace Common {
/*---------------------------------------------------------------------+\
|
|	Local defines / constants
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Local Type Definitions
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Private Global Variables
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Public Global Variables
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	External Variables
|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||
||	 Code
||
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VGDI - constructor

\+---------------------------------------------------------------------*/
VGDI::VGDI
		(
		void
		)
		: m_nHash( 0 )
		, m_hPrev( 0 )
		, m_hdc( 0 )
{
}

/*---------------------------------------------------------------------+\

 * VGDI - copy constructor

\+---------------------------------------------------------------------*/
VGDI::VGDI
		(
		VGDIRef	r
		)
		: m_nHash( r.m_nHash )
		, m_hPrev( r.m_hPrev )
		, m_hdc( r.m_hdc )
{
	r.m_hPrev = 0;
	r.m_hdc = 0;
}

/*---------------------------------------------------------------------+\

 * ~VGDI - destructor

\+---------------------------------------------------------------------*/
VGDI::~VGDI
		(
		void
		)
{
	Deselect();
}

/*=====================================================================+\
||	 public member functions
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
VGDIRef
		VGDI::operator=
		(
		VGDIRef	r
		)
{
	// TODO: add instructions to copy data "r" to "this"
	m_nHash = r.m_nHash;
	m_hPrev = r.m_hPrev;
	m_hdc = 0;
	r.m_hPrev = 0;
	return *this;
}


/*---------------------------------------------------------------------+\

 * Select -

\+---------------------------------------------------------------------*/
//virtual
bool	VGDI::Select
		(
		HDC //h
		)
{
	return false;
}

/*---------------------------------------------------------------------+\

 * Deselect -

\+---------------------------------------------------------------------*/
//virtual
bool	VGDI::Deselect
		(
		void
		)
{
	return false;
}

/*---------------------------------------------------------------------+\

 * GetHash -

\+---------------------------------------------------------------------*/
//virtual
uintmax_t
		VGDI::GetHash
		(
		void
		) const
{
	return m_nHash;
}


/*=====================================================================+\
||	 protected member functions
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions
\+=====================================================================*/

/*=====================================================================+\
||
||	 Overrides
||
\+=====================================================================*/


}}


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/
