<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
<title>XML Objects</title>
<style type="text/css">
html
{
	font-family: sans-serif;
}

.code
{
	font-family: monospace;
	color: #003300;
	background: #EEEEF4;
}

ul.code
{
	list-style-type: none;
}

.code li, .code ul
{
	list-style-type: none;
}








</style>
</head>

<body>

<h1>XML Objects</h1>
<p>All new XML engine for creation of objects.&nbsp; The system will use a 
psuedo schema mechanism that identifies data-types, properties, and sets 
(objects that contain properties).</p>
<p>The schema will be an xml file that may resemble something like:</p>
<ul class="code">
	<li>&lt;?xml?&gt;</li>
	<li>&lt;XmlObjects&gt;<ul>
		<li>&lt;RootDefs<ul>
			<li>Name=&quot;Gadgets&quot;</li>
		</ul>
		</li>
		<li>&lt;TypeDefs&gt;<ul>
			<li>&lt;TypeDef<ul>
				<li>Name=&quot;FLOAT&quot;</li>
				<li>Factory=&quot;FLOATClass&quot;</li>
				<li>Descr=&quot;Floating Point Value&quot;</li>
			</ul>
			</li>
		</ul>
		</li>
		<li>&lt;/TypeDefs&gt;</li>
		<li>&lt;PropertyDefs&gt;<ul>
			<li>&lt;PropertyDef<ul>
				<li>Name=&quot;SizeScale&quot;</li>
				<li>Type=&quot;FLOAT&quot;</li>
				<li>Default=&quot;1.0&quot;</li>
				<li>Descr=&quot;X, Y Scaling&quot;</li>
			</ul>
			</li>
		</ul>
		</li>
		<li>&lt;/PropertyDefs&gt;</li>
		<li>&lt;AttributeDefs&gt;<ul>
			<li>&lt;AttributeDef<ul>
				<li>Name=&quot;SomeAttribute&quot;</li>
				<li>Type=&quot;TEXT&quot;</li>
				<li>Descr=&quot;Some Generic Attribute&quot;</li>
			</ul>
			</li>
		</ul>
		</li>
		<li>&lt;/AttributeDefs&gt;</li>
		<li>&lt;SetDefs&gt;<ul>
			<li>&lt;SetDef<ul>
				<li>Name=&quot;Element&quot;</li>
				<li>Factory=&quot;FactoryElement&quot;</li>
				<li>Descr=&quot;Container for coordinate system&quot;<ul>
					<li>&gt;</li>
				</ul>
				</li>
				<li>&lt;Attribute Name=&quot;SomeAttribute&quot; /&gt;</li>
				<li>&lt;Property Name=&quot;SizeScale&quot; /&gt;</li>
				<li>&lt;Property Name=&quot;xxx&quot; /&gt;</li>
				<li>&lt;Set Name=&quot;Element&quot; /&gt;</li>
			</ul>
			</li>
			<li>&lt;/SetDef&gt;</li>
		</ul>
		</li>
		<li>&lt;/SetDefs&gt;</li>
	</ul>
	</li>
	<li>&lt;/XmlObjects&gt;</li>
</ul>
<p>The real XML described by this simple schema definition might look something 
like:</p>
<ul class="code">
	<li>&lt;Gadgets&gt;<ul>
		<li>&lt;Element&gt;<ul>
			<li>&lt;SizeScale&gt;1.5&lt;/SizeScale&gt;</li>
		</ul>
		</li>
		<li>&lt;/Element&gt;</li>
	</ul>
	</li>
	<li>&lt;/Gadgets&gt;</li>
</ul>
<h2>Thoughts on Tags</h2>
<h3>TypeDefs</h3>
<p>The TypeDef tag should define a handler/parser for the data type.&nbsp; This 
way we can even extend the data types that we can support.&nbsp; The parser will 
be responsible for validating the content of a tag and producing a single data 
object result.</p>
<h3>PropertyDefs</h3>
<p>The PropertyDef tag defines a handler that maps the data of the identified 
tag to a loader function on an object.&nbsp; The PropertyDef&#39;s main job is to 
identify the name of the XML tag for this property.</p>
<h3>SetDefs</h3>
<p>The SetDef tag identifies the name of the &quot;real&quot; tag that contains a set of property tags.&nbsp; 
This tag also identifies the class that will be instantiated and used as a factory for this set.</p>
<h2>Thoughts on Classes</h2>
<p>We will most likely use classes that are partially modeled on our 
Command-Plugins.</p>
<p>For the TypeDef parsers the &quot;plugin&quot; will register which types that it is 
willing to handle.</p>
<p>For SetDefs the &quot;plugin&quot; will register which classes for which it is willing 
to server up instances.</p>
<p>An open question is how to map/load the property objects into the Set 
objects.</p>
<h2>The Factories</h2>
<h3>XOSchema</h3>
<p>Read in schema XML file and create an XOParser</p>
<h3>XOLibrary</h3>
<p>Provides access to component factories</p>
<ul>
	<li>Type factories</li>
	<li>Property factories</li>
	<li>Set factories</li>
	<li>Root factories</li>
</ul>
<h3>XOParser</h3>
<ul>
	<li>XOParserRoot</li>
	<li>XOParserType</li>
	<li>XOParserAttribute</li>
	<li>XOParserProperty</li>
	<li>XOParserSet</li>
</ul>
<p>Accepts XML file and produces an object list.</p>

</body>

</html>
