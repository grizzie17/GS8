/*---------------------------------------------------------------------+\
|
|	VDesk.cpp  --  brief description of what VDesk.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	16-Nov-2011			J.Griswold		(Reviewed by: xxxx)
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Include Files
|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "VDesk.h"

using namespace Yogi::Core;
using namespace Yogi::Common;
namespace Yogi { namespace Gadget {
/*---------------------------------------------------------------------+\
|
|	Local defines / constants
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Local Type Definitions
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Private Global Variables
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Public Global Variables
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	External Variables
|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||
||	 Code
||
\+=====================================================================*/

/*=====================================================================+\
||	 class lifecycle functions
\+=====================================================================*/
/**--------------------------------------------------------------------+\

 * <summary>VDesk - constructor</summary>

 * <remarks/>

\+---------------------------------------------------------------------*/
VDesk::VDesk
		(
		void
		)
		: VSupports()
{
}

VDesk::VDesk
		(
		ISupportsPtr	pOwner
		)
		: VSupports( pOwner )
{
}

VDesk::VDesk
		(
		const char*		sName,
		ISupportsPtr	pOwner
		)
		: VSupports( sName, pOwner )
{
}

/**--------------------------------------------------------------------+\

 * <summary>VDesk - copy constructor</summary>

 * <remarks/>

\+---------------------------------------------------------------------*/
VDesk::~VDesk
		(
		void
		)
{
}

/*=====================================================================+\
||	 interface implementation functions
\+=====================================================================*/

/*---------------------------------------------------------------------+\
|	 IDesk
\+---------------------------------------------------------------------*/


/**--------------------------------------------------------------------+\

 * <summary>someFunction - brief statement</summary>

 * <remarks/>

\+---------------------------------------------------------------------*/
//virtual
NResult	VDesk::OnActivate
		(
		)
{
	return NR_E_FAIL;
}

//virtual
NResult	VDesk::OnDeactivate
		(
		)
{
	return NR_E_FAIL;
}

//virtual
NResult	VDesk::OnRender
		(
		VDrawPtr	//pDraw
		)
{
	return NR_E_FAIL;
}


/*=====================================================================+\
||	 public member functions
\+=====================================================================*/

/*=====================================================================+\
||	 protected member functions
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions
\+=====================================================================*/

/*=====================================================================+\
||
||	 Overrides
||
\+=====================================================================*/

/**--------------------------------------------------------------------+\

 * <summary>FindInternalInterface - brief statement</summary>

 * <remarks/>

\+---------------------------------------------------------------------*/
void*	VDesk::FindInternalInterface
		(
		ConstIXIDRef	rIID
		)
{
	void*	pI = VSupports::FindInternalInterface( rIID );
	if ( ! pI )
	{
		if ( rIID == IXID_IDesk )
			pI = INTERFACE_THIS( IDeskPtr );
		else
			pI = 0;
	}

	return pI;
}

/**--------------------------------------------------------------------+\

 * <summary>someFunction - brief statement</summary>

 * <remarks/>

\+---------------------------------------------------------------------*/


}}
