/*---------------------------------------------------------------------+\
|
|	VEqOpUnary.cpp  --  brief description of what VEqOpUnary.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	25-Jun-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "VEqOpUnary.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
namespace Yogi { namespace Gadget {
//USING_NAMESPACE_COMMON
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VEquationOperatorUnary - constructor

\+---------------------------------------------------------------------*/
VEquationOperatorUnary::VEquationOperatorUnary
		(
		void
		)
		: VEquation(),
		m_pOperand( 0 )
{
}

/*---------------------------------------------------------------------+\

 * VEquationOperatorUnary - copy constructor

\+---------------------------------------------------------------------*/
VEquationOperatorUnary::VEquationOperatorUnary
		(
		ConstVEquationOperatorUnaryRef	r
		)
		: VEquation( r ),
		m_pOperand( 0 )
{
	if ( r.m_pOperand )
		m_pOperand = r.m_pOperand->Clone();
}

/*---------------------------------------------------------------------+\

 * ~VEquationOperatorUnary - destructor

\+---------------------------------------------------------------------*/
VEquationOperatorUnary::~VEquationOperatorUnary
		(
		void
		)
{
	if ( m_pOperand )
		delete m_pOperand;
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
VEquationOperatorUnaryRef
		VEquationOperatorUnary::operator=
		(
		ConstVEquationOperatorUnaryRef	r
		)
{
	VEquation::operator=( r );

	if ( m_pOperand )
		delete m_pOperand;
	if ( r.m_pOperand )
		m_pOperand = r.m_pOperand->Clone();

	return *this;
}

/*---------------------------------------------------------------------+\

 * SetOperand -

\+---------------------------------------------------------------------*/
void	VEquationOperatorUnary::SetOperand
		(
		VEquationPtr pOperand
		)
{
	if ( m_pOperand )
		delete m_pOperand;
	m_pOperand = pOperand;
}


/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/

}}

/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/
