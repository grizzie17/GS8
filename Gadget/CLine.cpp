/*---------------------------------------------------------------------+\
|
|	CLine.cpp  --  brief description of what CLine.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	03-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Change the signature of Calculate to support the concept of
		foreground/background data
	15-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Fix compiler warnings
	01-Jul-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "CLine.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
using namespace Yogi::Core;
using namespace Yogi::Common;
namespace Yogi { namespace Gadget {
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * CLine - constructor

\+---------------------------------------------------------------------*/
CLine::CLine
		(
		void
		)
		: VGraphic(),
		m_tBegin(),
		m_tEnd(),
		m_nWidth( 1 ),
		m_tColor()
{
}

/*---------------------------------------------------------------------+\

 * CLine - copy constructor

\+---------------------------------------------------------------------*/
CLine::CLine
		(
		ConstCLineRef	r
		)
		: VGraphic( r ),
		m_tBegin( r.m_tBegin ),
		m_tEnd( r.m_tEnd ),
		m_nWidth( r.m_nWidth ),
		m_tColor( r.m_tColor )
{
	// TODO: add instructions to copy data from "r" to "this"
}

/*---------------------------------------------------------------------+\

 * ~CLine - destructor

\+---------------------------------------------------------------------*/
CLine::~CLine
		(
		void
		)
{
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
CLineRef
		CLine::operator=
		(
		ConstCLineRef
		)
{
	// TODO: add instructions to copy data "r" to "this"
	return *this;
}


/*---------------------------------------------------------------------+\

 * SetBegin -

\+---------------------------------------------------------------------*/
void	CLine::SetBegin
		(
		CPointValueRef tBegin
		)
{
	m_tBegin = tBegin;
}


/*---------------------------------------------------------------------+\

 * SetEnd -

\+---------------------------------------------------------------------*/
void	CLine::SetEnd
		(
		CPointValueRef tEnd
		)
{
	m_tEnd = tEnd;
}


/*---------------------------------------------------------------------+\

 * Begin -

\+---------------------------------------------------------------------*/
CPointValuePtr
		CLine::Begin
		(
		void
		)
{
	return &m_tBegin;
}

/*---------------------------------------------------------------------+\

 * End -

\+---------------------------------------------------------------------*/
CPointValuePtr
		CLine::End
		(
		void
		)
{
	return &m_tEnd;
}


/*---------------------------------------------------------------------+\

 * SetLineWidth -

\+---------------------------------------------------------------------*/
void	CLine::SetLineWidth
		(
		short nWidth
		)
{
	Style()->SetLineWidth( float(nWidth) );
}


/*---------------------------------------------------------------------+\

 * SetLineColor -

\+---------------------------------------------------------------------*/
void	CLine::SetLineColor
		(
		ConstCColorRef	tColor
		)
{
	Style()->SetLineColor( tColor );
}

/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/




/*---------------------------------------------------------------------+\

 * Calculate -

\+---------------------------------------------------------------------*/
int		CLine::Calculate
		(
		VDictionaryPtr pDict
		)
{
	int	nResult = VGraphic::Calculate( pDict );
	nResult |= m_tBegin.Calculate( pDict );
	return m_tEnd.Calculate( pDict )  |  nResult;
}

/*---------------------------------------------------------------------+\

 * Render -

\+---------------------------------------------------------------------*/
bool	CLine::Render
		(
		VDictionaryPtr pDict,
		VDrawPtr pDraw
		)
{
	VGraphic::Render( pDict, pDraw );

	float	nXBegin = m_tBegin.GetX();
	float	nYBegin = m_tBegin.GetY();
	float	nXEnd = m_tEnd.GetX();
	float	nYEnd = m_tEnd.GetY();

	return pDraw->Line( nXBegin, nYBegin, nXEnd, nYEnd );
}

/*---------------------------------------------------------------------+\

 * GetSize -

\+---------------------------------------------------------------------*/
bool	CLine::GetSize
		(
		VDictionaryPtr,
		long& ,		//rnWidth,
		long&		//rnHeight
		)
{
	return false;
}

/*---------------------------------------------------------------------+\

 * IsDisplayed -

\+---------------------------------------------------------------------*/
bool	CLine::IsDisplayed
		(
		VDictionaryPtr
		)
{
	return true;
}




}}


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/
