/*---------------------------------------------------------------------+\
|
|	CVisible.cpp  --  brief description of what CVisible.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	03-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Change the signature of Calculate to support the concept of
		foreground/background data
	30-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Add support for ProcessEvent and ProcessMouse
	15-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Fix compiler warnings
	19-Jul-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "CVisible.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
NAMESPACE_GADGET_BEGIN
//USING_NAMESPACE_COMMON
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * CVisible - constructor

\+---------------------------------------------------------------------*/
CVisible::CVisible
		(
		void
		)
		: VRenderable(),
		m_tValue()
{
}

/*---------------------------------------------------------------------+\

 * CVisible - copy constructor

\+---------------------------------------------------------------------*/
CVisible::CVisible
		(
		ConstCVisibleRef	r
		)
		: VRenderable( r ),
		m_tValue( r.m_tValue )
{
	// TODO: add instructions to copy data from "r" to "this"
}

/*---------------------------------------------------------------------+\

 * ~CVisible - destructor

\+---------------------------------------------------------------------*/
CVisible::~CVisible
		(
		void
		)
{
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
CVisibleRef
		CVisible::operator=
		(
		ConstCVisibleRef
		)
{
	// TODO: add instructions to copy data "r" to "this"
	return *this;
}



/*---------------------------------------------------------------------+\

 * SetEquation -

\+---------------------------------------------------------------------*/
void	CVisible::SetEquation
		(
		VEquationPtr p
		)
{
	m_tValue.SetEquation( p );
}

/*---------------------------------------------------------------------+\

 * GetValue -

\+---------------------------------------------------------------------*/
bool	CVisible::GetValue
		(
		void
		)
{
	CVariantData	d = m_tValue.GetCachedValue();
	return (bool)d;
}


/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * Calculate -

\+---------------------------------------------------------------------*/
int		CVisible::Calculate
		(
		VDictionaryPtr pDict
		)
{
	if ( m_tValue.Calculate( pDict ) )
		return VRDR_CALCULATE_UNDETERMINED;
	else
		return 0;
}


/*---------------------------------------------------------------------+\

 * PreRender -

\+---------------------------------------------------------------------*/
bool	CVisible::PreRender
		(
		VDictionaryPtr pDict,
		VDrawQueuePtr pQueue
		)
{
	if ( IsDisplayed( pDict ) )
		pQueue->SetVisible( true );
	else
		pQueue->SetVisible( false );
	return true;
}


/*---------------------------------------------------------------------+\

 * Render -

\+---------------------------------------------------------------------*/
bool	CVisible::Render
		(
		VDictionaryPtr,
		VDrawPtr
		)
{
	// do nothing
	return true;
}


/*---------------------------------------------------------------------+\

 * GetSize -

\+---------------------------------------------------------------------*/
bool	CVisible::GetSize
		(
		VDictionaryPtr,
		long&,
		long&
		)
{
	return false;
}


/*---------------------------------------------------------------------+\

 * IsDisplayed -

\+---------------------------------------------------------------------*/
bool	CVisible::IsDisplayed
		(
		VDictionaryPtr
		)
{
	bool	b = m_tValue.GetCachedValue();
	return b;
}



/*---------------------------------------------------------------------+\

 * ProcessEvent -

\+---------------------------------------------------------------------*/
bool	CVisible::ProcessEvent
		(
		VDictionaryPtr			,
		VDictionary::Selector
		)
{
	return false;
}


/*---------------------------------------------------------------------+\

 * ProcessMouse -

\+---------------------------------------------------------------------*/
bool	CVisible::ProcessMouse
		(
		VDictionaryPtr		,
		CMouseLocatePtr
		)
{
	return false;
}




NAMESPACE_GADGET_END


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/

