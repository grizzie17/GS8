/*---------------------------------------------------------------------+\
|
|	VOwnership.cpp  --  brief description of what VOwnership.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	03-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Add functions for dealing with propagating the
		foreground/background context
	30-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Add support for ProcessEvent and ProcessMouse.
	16-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Resolve compiler warning generated by GCC++
	15-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Fix compiler warnings
	19-Jun-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "VOwnership.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
NAMESPACE_GADGET_BEGIN
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VOwnership - constructor

\+---------------------------------------------------------------------*/
VOwnership::VOwnership
		(
		void
		)
		: VRenderable(),
		m_pParent( 0 ),
		m_mChildrenContext( 0 )
{
}

/*---------------------------------------------------------------------+\

 * VOwnership - copy constructor

\+---------------------------------------------------------------------*/
VOwnership::VOwnership
		(
		ConstVOwnershipRef	r
		)
		: VRenderable( r )
{
	m_pParent = r.m_pParent;
	m_mChildrenContext = r.m_mChildrenContext;
}

/*---------------------------------------------------------------------+\

 * ~VOwnership - destructor

\+---------------------------------------------------------------------*/
VOwnership::~VOwnership
		(
		void
		)
{
	m_pParent = 0;
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
VOwnershipRef
		VOwnership::operator=
		(
		ConstVOwnershipRef	r
		)
{
	// TODO: add instructions to copy data "r" to "this"
	m_pParent = r.m_pParent;
	return *this;
}

/*----------------------------------------------------------------------+\

 * SetParent - Identify parent object

\+---------------------------------------------------------------------*/
void	VOwnership::SetParent
		(
		VOwnershipPtr	pParent
		)
{
	m_pParent = pParent;
}

/*----------------------------------------------------------------------+\

 * GetParent - Retrieve parent object

\+---------------------------------------------------------------------*/
VOwnershipPtr
		VOwnership::GetParent
		(
		void
		)
{
	return m_pParent;
}


/*----------------------------------------------------------------------+\

 * IncludeContext - Retrieve parent object

\+---------------------------------------------------------------------*/
void	VOwnership::IncludeContext
		(
		int mask
		)
{
	m_mChildrenContext |= mask;
}

int		VOwnership::GetChildContext
		(
		void
		)
{
	return m_mChildrenContext;
}

/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/


bool	VOwnership::Layout
		(
		VDictionaryPtr
		)
{
	return false;
}


/*---------------------------------------------------------------------+\

 * PreRender -

\+---------------------------------------------------------------------*/
bool	VOwnership::PreRender
		(
		VDictionaryPtr,
		VDrawQueuePtr	pQueue
		)
{
	return pQueue->AddGraphic( this );
}



/*---------------------------------------------------------------------+\

 * ProcessEvent -

\+---------------------------------------------------------------------*/
bool	VOwnership::ProcessEvent
		(
		VDictionaryPtr			,
		VDictionary::Selector
		)
{
	return false;
}


/*---------------------------------------------------------------------+\

 * ProcessMouse -

\+---------------------------------------------------------------------*/
bool	VOwnership::ProcessMouse
		(
		VDictionaryPtr		,
		CMouseLocatePtr
		)
{
	return false;
}



NAMESPACE_GADGET_END

/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/

