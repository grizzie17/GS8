/*---------------------------------------------------------------------+\
|
|	CResultValue.cpp  --  manage the equation and its resulting value
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	10-Nov-2010			J.Griswold		(Reviewed by: xxxx)
		Add accessors for the data
	06-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Add support for fixed-point replacement for float
	29-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Add SetValueExclussive that will clear the equation if one
		is present.
	16-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Resolve compiler warning generated by GCC++
	29-Jun-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "CResultValue.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
using namespace Yogi::Common;
namespace Yogi { namespace Gadget {

/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * CResultValue - constructor

\+---------------------------------------------------------------------*/
CResultValue::CResultValue
		(
		void
		)
		: VEquation()
		, m_vCachedData()
		, m_pEquation( 0 )
{
}

/*---------------------------------------------------------------------+\

 * CResultValue - copy constructor

\+---------------------------------------------------------------------*/
CResultValue::CResultValue
		(
		ConstCResultValueRef	r
		)
		: VEquation( r )
		, m_vCachedData( r.m_vCachedData )
		, m_pEquation( 0 )
{
	if ( r.m_pEquation )
		m_pEquation = r.m_pEquation->Clone();
}

/*---------------------------------------------------------------------+\

 * ~CResultValue - destructor

\+---------------------------------------------------------------------*/
CResultValue::~CResultValue
		(
		void
		)
{
	if ( m_pEquation )
		delete m_pEquation;
	m_pEquation = 0;
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*----------------------------------------------------------------------+\

 * operator= - assignment operator

\+---------------------------------------------------------------------*/
CResultValueRef
		CResultValue::operator=
		(
		ConstCResultValueRef	r
		)
{
	m_vCachedData.LoadCopy( r.m_vCachedData );
	//m_vCachedData = r.m_vCachedData;
	if ( m_pEquation )
		delete m_pEquation;
	if ( r.m_pEquation )
		m_pEquation = r.m_pEquation->Clone();
	else
		m_pEquation = 0;
	return *this;
}


/*---------------------------------------------------------------------+\

 * Calculate - calculated data

\+---------------------------------------------------------------------*/
bool	CResultValue::Calculate
		(
		VDictionaryPtr pDict
		)
{
	bool	bResult = false;
	if ( m_pEquation )
	{
		CVariantData	vData = m_pEquation->GetValue( pDict );

		if ( vData != m_vCachedData )
		{
			m_vCachedData = vData;
			bResult = true;
		}
	}
	return bResult;
}

/*---------------------------------------------------------------------+\

 * GetCachedValue - retrieve previously calculated data

\+---------------------------------------------------------------------*/
CVariantData
		CResultValue::GetCachedValue
		(
		void
		)
{
	return m_vCachedData;
	//CVariantData	vData;

	//if ( m_vCachedData.GetType() == CVariantData::UNDEFINED )
	//	return vData;
	//else
	//	return m_vCachedData;
}


/*---------------------------------------------------------------------+\

 * HasEquation - Does this ResultValue have an expression

\+---------------------------------------------------------------------*/
bool	CResultValue::HasEquation
		(
		void
		)
{
	return m_pEquation != 0;
}


/*---------------------------------------------------------------------+\

 * GetEquation

 * Warning: returns raw pointer to Equation

\+---------------------------------------------------------------------*/
VEquationPtr
		CResultValue::GetEquation
		(
		void
		)
{
	return m_pEquation;
}

/*---------------------------------------------------------------------+\

 * SetEquation - Assign equation pointer

\+---------------------------------------------------------------------*/
bool	CResultValue::SetEquation
		(
		VEquationPtr pEquation
		)
{
	if ( pEquation )
	{
		if ( m_pEquation )
			delete m_pEquation;
		m_pEquation = pEquation;
		return true;
	}
	else
	{
		return false;
	}
}


/*---------------------------------------------------------------------+\

 * SetValue - Assign a constant value

\+---------------------------------------------------------------------*/
bool	CResultValue::SetValue
		(
		ConstCVariantDataRef r
		)
{
	m_vCachedData = r;
	return true;
}

/*---------------------------------------------------------------------+\

 * SetValue - Assign a constant value

\+---------------------------------------------------------------------*/
bool	CResultValue::SetValue
		(
		GFLOAT	f
		)
{
	CVariantData	d;
	d = f;
	return SetValue( d );
}


/*---------------------------------------------------------------------+\

 * SetValueExclussive - Assign a constant value

\+---------------------------------------------------------------------*/
bool	CResultValue::SetValueExclussive
		(
		ConstCVariantDataRef r
		)
{
	if ( m_pEquation )
	{
		delete m_pEquation;
		m_pEquation = 0;
	}
	m_vCachedData = r;
	return true;
}

/*---------------------------------------------------------------------+\

 * SetValueExclussive - Assign a constant value

\+---------------------------------------------------------------------*/
bool	CResultValue::SetValueExclussive
		(
		GFLOAT	f
		)
{
	CVariantData	d;
	d = f;
	return SetValueExclussive( d );
}


/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * GetValue -

\+---------------------------------------------------------------------*/
CVariantData
		CResultValue::GetValue
		(
		VDictionaryPtr pDict
		)
{
	m_vCachedData = (CVariantData)m_pEquation->GetValue( pDict );
	return m_vCachedData;
}


/*---------------------------------------------------------------------+\

 * Clone -

\+---------------------------------------------------------------------*/
VEquationPtr
CResultValue::Clone
		(
		void
		)
{
	return new CResultValue( *this );
}



}}


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/
