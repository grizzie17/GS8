/*---------------------------------------------------------------------+\
|
|	VPanelChild.cpp  --  brief description of what VPanelChild.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	07-Mar-2010			J.Griswold		(Reviewed by: M.Rose)
		Implement new Layout function that deals with position and
		size calculation
	03-Jan-2010			J.Griswold		(Reviewed by: M.Rose)
		Change to use 'Size' instead of separate Width and Height
		properties to be more compatible with V2 schema
	19-Jul-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "VPanelChild.h"
/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
NAMESPACE_GADGET_BEGIN

/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VPanelChild - constructor

\+---------------------------------------------------------------------*/
VPanelChild::VPanelChild
		(
		void
		)
		: VControl(),
		m_pPosition( 0 ),
		m_tSize(),
		m_bCropped( false )
{
}


/*---------------------------------------------------------------------+\

 * ~VPanelChild - destructor

\+---------------------------------------------------------------------*/
VPanelChild::~VPanelChild
		(
		void
		)
{
	if ( m_pPosition )
		delete m_pPosition;
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/


/*---------------------------------------------------------------------+\

 * SetSize -

\+---------------------------------------------------------------------*/
void	VPanelChild::SetSize
		(
		long	nWidth,
		long	nHeight
		)
{
	m_tSize.X()->SetValue( GFLOAT(nWidth) );
	m_tSize.Y()->SetValue( GFLOAT(nHeight) );
}



/*---------------------------------------------------------------------+\

 * SetPosition -

\+---------------------------------------------------------------------*/
void	VPanelChild::SetPosition
		(
		CPositionPtr	pPos
		)
{
	if ( m_pPosition )
		delete m_pPosition;
	m_pPosition = pPos;
}

/*---------------------------------------------------------------------+\

 * Position -

\+---------------------------------------------------------------------*/
CPositionPtr
		VPanelChild::Position
		(
		void
		)
{
	if ( ! m_pPosition )
		m_pPosition = new CPosition;
	return m_pPosition;
}


/*---------------------------------------------------------------------+\

 * Size -

\+---------------------------------------------------------------------*/
CSizePtr
		VPanelChild::Size
		(
		void
		)
{
	return &m_tSize;
}


/*---------------------------------------------------------------------+\

 * SetCropped -

\+---------------------------------------------------------------------*/
void	VPanelChild::SetCropped
		(
		bool b
		)
{
	m_bCropped = b;
}




/*---------------------------------------------------------------------+\

 * Layout -

\+---------------------------------------------------------------------*/
bool	VPanelChild::Layout
		(
		VDictionaryPtr pDict
		)
{
	bool	bResult = false;

	if ( m_tSize.Calculate( pDict ) )
		bResult = true;

	if ( m_pPosition )
	{
		if ( m_pPosition->Calculate( pDict ) )
			bResult = true;
	}

	return bResult;
}

/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/


/*---------------------------------------------------------------------+\

 * GetSize -

\+---------------------------------------------------------------------*/
bool	VPanelChild::GetSize
		(
		VDictionaryPtr,
		long&			rnWidth,
		long&			rnHeight
		)
{
	rnWidth = (long)m_tSize.GetX();
	rnHeight = (long)m_tSize.GetY();
	return true;
}


/*---------------------------------------------------------------------+\

 * IsDisplayed -

\+---------------------------------------------------------------------*/
bool	VPanelChild::IsDisplayed
		(
		VDictionaryPtr
		)
{
	// TODO: add check for CVisible
	return true;
}


NAMESPACE_GADGET_END


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/

