/*---------------------------------------------------------------------+\
|
|	VFactory.cpp  --  base class for XML based factories
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	10-Apr-2010			J.Griswold		(Reviewed by: xxxx)
		Move to "Common" folder with "Xxx::Common::" namespace
	18-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Add use of new GetApplicationFolder when calculating where
		to find our xml files.
	11-Nov-2009			J.Griswold		(Reviewed by: M.Rose)
		Fix the way we get the 'application directory' for linux
		This is a science project that needs to be verified
	15-Oct-2009			J.Griswold		(Reviewed by: M.Rose)
		Add new function 'ApplicationFolder' to help identify
		the default location for the GaugeXML folder.
	22-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Conversion to new hierarcy that uses the XMLParser as the
		base class
	16-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Resolve compiler warning generated by GCC++
	09-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Rework hierarchy
	21-Jul-2009			J.Griswold
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include <string.h>

#include "VFactory.h"

//#include "XMLLiteImpl.h"
//#include "UMachine.h"
#include "UPlatform.h"

NAMESPACE_COMMON_BEGIN

/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/

//char	VFactory::g_sApplicationFolder[1024] = { 0 };

/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VFactory - constructor

\+---------------------------------------------------------------------*/
VFactory::VFactory
		(
		void
		)
//		: m_pXML( this )
{
}


/*---------------------------------------------------------------------+\

 * ~VFactory - destructor

\+---------------------------------------------------------------------*/
VFactory::~VFactory
		(
		void
		)
{
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/



/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/



/*---------------------------------------------------------------------+\

 * EatNode -

\+---------------------------------------------------------------------*/
bool	VFactory::EatNode
		(
		void
		)
{
	bool	bResult = true;

	if ( XMLLite::NODE_ELEMENT_BEGIN == NodeType() )
	{
		XMLIterator	it( this );

		while ( it.NextChild() )
		{
			switch ( it.NodeType() )
			{
			case XMLLite::NODE_ELEMENT_BEGIN:
				bResult = EatNode();
				break;
            default:
                break;
			}
		}
	}

	return bResult;
}


/*---------------------------------------------------------------------+\

 * MakeXML -

\+---------------------------------------------------------------------*/
bool	VFactory::MakeXML
		(
		void
		)
{
	//if ( ! m_pXML )
	//	m_pXML = new XMLLite::TTokenizer<char>;
	//return m_pXML ? true : false;
	return false;
}


/*---------------------------------------------------------------------+\

 * ApplicationFolder -

\+---------------------------------------------------------------------*/
const char*
		VFactory::ApplicationFolder
		(
		void
		)
{
	return ::GetUserConfigFolder();
}






/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/


NAMESPACE_COMMON_END


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/

