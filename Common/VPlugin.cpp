/*---------------------------------------------------------------------+\
|
|	VPlugin.cpp  --  brief description of what VPlugin.cpp is for
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
    29-Jul-2010        J.Griswold        (Reviewed by: S.Snider)
        Add support for IPlugin::ID()
	10-Apr-2010			J.Griswold		(Reviewed by: xxxx)
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include "VPlugin.h"


/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
namespace Yogi { namespace Common {
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/
/*---------------------------------------------------------------------+\

 * VPlugin - constructor

\+---------------------------------------------------------------------*/
VPlugin::VPlugin
		(
		void
		)
		: VSupports()
		, m_sID()
{
}

VPlugin::VPlugin
		(
		ISupportsPtr	pOwner
		)
		: VSupports( pOwner )
		, m_sID()
{
}

VPlugin::VPlugin
		(
		const char*		sName,
		ISupportsPtr	pOwner
		)
		: VSupports( sName, pOwner )
		, m_sID()
{
}

/*---------------------------------------------------------------------+\

 * ~VPlugin - destructor

\+---------------------------------------------------------------------*/
VPlugin::~VPlugin
		(
		void
		)
{
}

/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*---------------------------------------------------------------------+\
|	IPlugin
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\

 * ClassName - get clasname

\+---------------------------------------------------------------------*/
const char*
		VPlugin::ClassName
		(
		void
		) const throw()
{
	return 0;
}


/*---------------------------------------------------------------------+\

 * ID -

\+---------------------------------------------------------------------*/
const char*
		VPlugin::ID
		(
		void
		) const throw()
{
	return m_sID.Pointer();
}



/*---------------------------------------------------------------------+\
|	IPluginLoadConfiguration
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\

 * Load -

\+---------------------------------------------------------------------*/
bool	VPlugin::Load
		(
		VPluginConfigurationPtr	pConfig,
		VPluginLibraryPtr		//pLib
		)
{
	bool	bResult = true;

	m_sID = pConfig->GetID();

	return bResult;
}

/*---------------------------------------------------------------------+\
|	ISupportsLocal
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\

 * Load -

\+---------------------------------------------------------------------*/
void*	VPlugin::QueryInterfaceLocal
		(
		ConstIXIDRef			rIID,
		Yogi::Core::NResultPtr	pResult	// = 0
		)
{
	return InternalQueryInterface( rIID, pResult );
}



/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * FindInternalInterface -

\+---------------------------------------------------------------------*/
void*
		VPlugin::FindInternalInterface
		(
		ConstIXIDRef	rIID
		)
{
	void*	p = VSupports::FindInternalInterface( rIID );
	if ( p )
		return p;

	if ( rIID == IXID_IPlugin )
		return INTERFACE_THIS(IPluginPtr);
	else if ( rIID == IXID_IPluginLoadConfiguration )
		return INTERFACE_THIS(IPluginLoadConfigurationPtr);
	else if ( rIID == IXID_ISupportsLocal )
		return INTERFACE_THIS(ISupportsLocalPtr);
	else
		return 0;
}




/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/





}}


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/
