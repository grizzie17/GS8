/*---------------------------------------------------------------------+\
|
|	XMLLiteImpl.cpp  --  class to read xml files via call-back
|
|	Purpose:
|
| optional topics (delete if not used)
|	Usage:
|	Restrictions/Warnings:
|	Algorithms/Formats:
|	References:
|	Notes:
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|
|	Revision History:					(most recent entries first)
|
	10-Apr-2010			J.Griswold		(Reviewed by: xxxx)
		Move to "Common" folder with "Xxx::Common::" namespace
	06-Dec-2009			J.Griswold		(Reviewed by: M.Rose)
		Add support for fixed-point replacement for float
	16-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Resolve compiler warning generated by GCC++
	15-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Fix compiler warnings
	10-Sep-2009			J.Griswold		(Reviewed by: M.Rose)
		Add support for the GetName function
	26-Aug-2009			J.Griswold		(Reviewed by: M.Rose)
		Initial Revision
|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Include Files														|
|																		|
\+---------------------------------------------------------------------*/
#include "stdafx.h"
#include <stdio.h>

#include "XMLLiteImpl.h"

#include "UPlatform.h"


namespace Yogi { namespace XMLLite {


/*---------------------------------------------------------------------+\
|																		|
|	Local defines / constants											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Local Type Definitions												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Private Global Variables											|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	Public Global Variables												|
|																		|
\+---------------------------------------------------------------------*/
/*---------------------------------------------------------------------+\
|																		|
|	External Variables													|
|																		|
\+---------------------------------------------------------------------*/
/*=====================================================================+\
||																		|
||	 Code																|
||																		|
\+=====================================================================*/
/*=====================================================================+\
||	 class lifecycle functions											|
\+=====================================================================*/


/*---------------------------------------------------------------------+\

 * CReadFile - Constructor

\+---------------------------------------------------------------------*/
CReadFile::CReadFile
		(
		void
		)
		: m_pFile( 0 )
		, m_nSize( 0 )
{
	m_sName[0] = 0;
}


/*---------------------------------------------------------------------+\

 * ~CReadFile - Destructor

\+---------------------------------------------------------------------*/
CReadFile::~CReadFile
		(
		void
		)
{
	if ( m_pFile )
		Close();
}


/*=====================================================================+\
||	 public member functions											|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * Open -

\+---------------------------------------------------------------------*/
bool	CReadFile::Open
		(
		const char*	sFilename
		)
{
	const char*	p = sFilename + ::strlen(sFilename);
	while ( sFilename <= p )
	{
		if ( '\\' == *p  ||  '/' == *p )
			break;
		--p;
	}
	if ( sFilename <= p )
	{
		--p;
		while ( sFilename <= p )
		{
			if ( '\\' == *p  ||  '/' == *p )
				break;
			--p;
		}
	}
	if ( '\\' == *p  ||  '/' == *p )
		++p;
	size_t	n = ::strlen(p);
	if ( sizeof(m_sName) <= n )
	{
		p = sFilename + ::strlen(sFilename) - (sizeof(m_sName) + 1);
	}
	::strcpy_s( m_sName, sizeof(m_sName), p );

	m_nSize = 0;
	if ( 0 == fopen_s( &m_pFile, sFilename, "rb" ) )
	{
		CalculateSize();
		return true;
	}
	else
	{
		m_pFile = 0;
		return false;
	}
}


/*---------------------------------------------------------------------+\

 * Close -

\+---------------------------------------------------------------------*/
bool	CReadFile::Close
		(
		void
		)
{
	if ( m_pFile )
	{
		::fclose( m_pFile );
		m_pFile = 0;
		return true;
	}
	else
	{
		return false;
	}
}


/*=====================================================================+\
||	 protected member functions											|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * CalculateSize -

\+---------------------------------------------------------------------*/
void	CReadFile::CalculateSize
		(
		void
		)
{
	if ( m_pFile )
	{
		::fseek( m_pFile, 0, SEEK_END );
		m_nSize = (size_t)::ftell( m_pFile );
		::fseek( m_pFile, 0, SEEK_SET );
	}
}


/*=====================================================================+\
||	 private member functions											|
\+=====================================================================*/

/*=====================================================================+\
||																		|
||	 Overrides															|
||																		|
\+=====================================================================*/

/*---------------------------------------------------------------------+\

 * Read -

\+---------------------------------------------------------------------*/
size_t	CReadFile::Read
		(
		void*			pBuffer,
		size_t			nBytesToRead,
		ETEXT_FORMAT	//eFormat
		)
{
	if ( ! m_pFile )
		return 0;

	// TODO: add support for byte-order marks and byte reversal.
	return ::fread( pBuffer, 1, nBytesToRead, m_pFile );
}


/*---------------------------------------------------------------------+\

 * GetSize -

\+---------------------------------------------------------------------*/
size_t	CReadFile::GetSize
		(
		void
		)
{
	return m_nSize;
}


/*---------------------------------------------------------------------+\

 * GetName -

\+---------------------------------------------------------------------*/
size_t	CReadFile::GetName
		(
		char*	sTarget,
		size_t	nSizeTarget
		)
{
	size_t	n = ::strlen(m_sName);
	if ( n < nSizeTarget )
		::strcpy_s( sTarget, nSizeTarget, m_sName );
	return n;
}




}}


/*---------------------------------------------------------------------+\

 * someFunction -

\+---------------------------------------------------------------------*/

